import org.junit.jupiter.api.Test;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class PojoGetterSetterTest {

    private final List<Class<?>> pojoClasses = List.of(
            Person.class,
            Address.class
            // agrega aqu√≠ todos los POJOs que quieras probar
    );

    @Test
    public void testAllPojoGettersAndSetters() throws Exception {
        for (Class<?> clazz : pojoClasses) {
            Object obj = clazz.getDeclaredConstructor().newInstance();
            Method[] methods = clazz.getDeclaredMethods();

            for (Method method : methods) {
                if (isSetter(method)) {
                    Class<?> paramType = method.getParameterTypes()[0];
                    Object dummyValue = getDummyValue(paramType);
                    method.invoke(obj, dummyValue);
                }
            }

            for (Method method : methods) {
                if (isGetter(method)) {
                    method.invoke(obj); // cobertura
                }
            }
        }
    }

    private boolean isSetter(Method method) {
        return method.getName().startsWith("set")
                && method.getParameterCount() == 1
                && Modifier.isPublic(method.getModifiers());
    }

    private boolean isGetter(Method method) {
        return (method.getName().startsWith("get") || method.getName().startsWith("is"))
                && method.getParameterCount() == 0
                && Modifier.isPublic(method.getModifiers());
    }

    private Object getDummyValue(Class<?> type) {
        if (type.equals(String.class)) return "dummy";
        if (type.equals(int.class) || type.equals(Integer.class)) return 42;
        if (type.equals(boolean.class) || type.equals(Boolean.class)) return true;
        if (type.equals(double.class) || type.equals(Double.class)) return 3.14;
        if (type.equals(long.class) || type.equals(Long.class)) return 123L;

        // Instanciar POJOs anidados
        try {
            if (!type.isPrimitive()
                    && !type.isEnum()
                    && !type.isInterface()
                    && !type.getPackageName().startsWith("java")) {
                return type.getDeclaredConstructor().newInstance();
            }
        } catch (Exception e) {
            // Si falla, se devuelve null
        }

        return null;
    }
}
